// Variables
variable "enable_triggers" {
  type        = bool
  description = "[Optional] (Boolean) Determines if the triggers should be enabled or disabled"
  default     = true
}

// Locals
locals {
  projects = {
    test-repo1 = {
      yaml_properties = <<-EOT
        properties:
          ci:
            codebase:
              build: <+input>
              repoName: test-repo1
          EOT
      yaml_stages = <<-EOT
        stages:
          - stage:
              identifier: default
              name: default
              spec:
                cloneCodebase: true
                execution:
                  steps:
                  - step:
                      identifier: hello
                      name: hello
                      spec:
                        command: echo hello world
                        connectorRef: exampleDockerConn
                        image: busybox
                      timeout: ""
                      type: Run
                infrastructure:
                  spec:
                    connectorRef: exampleKubeConn
                    namespace: exampleNamespace
                  type: KubernetesDirect
                platform:
                  arch: Amd64
                  os: Linux
              type: CI
              when:
                condition: <+trigger.targetBranch> == "main"
                pipelineStatus: Success
          EOT
      branch    = "gh-pages"
      namespace = "octocat"
      repo      = "test-repo1"
      secrets   = {
        PROJECT_SECRET_ONE = {
          value = "dG9wc2VjcmV0"
        }
        PROJECT_SECRET_TWO = {
          value = "c3VwZXItc2VjcmV0"
        }
      }
    }
  }
  secrets = {
    ORG_SECRET_ONE = {
      value = "Y29uZmlkZW50aWFs"
    }
    ORG_SECRET_TWO = {
      value = "c2Vuc2l0aXZl"
    }
  }
}

terraform {
  required_providers {
    harness = {
      source  = "harness/harness"
      version = "= 0.19.1"
    }
  }
}

provider "harness" {
  endpoint = "https://app.harness.io/gateway"
  account_id = "DNVIhrzCr9SnPHMQUEvRspB"
}

// Organization
module "organization" {
  source  = "harness-community/structure/harness//modules/organizations"
  version = "~> 0.1"

  name = "exampleOrg"
}
// Organization secrets
resource "harness_platform_secret_text" "organization" {
  for_each = local.secrets

  identifier                = replace(each.key, "-", "_")
  name                      = each.key
  org_id                    = module.organization.details.id
  secret_manager_identifier = "harnessSecretManager"
  value                     = base64decode(each.value.value)
  value_type                = "Inline"
}

// Projects
module "projects" {
  for_each = local.projects

  source  = "harness-community/structure/harness//modules/projects"
  version = "~> 0.1"

  name            = each.key
  organization_id = module.organization.details.id
}

// Pipelines
module "pipelines" {
  for_each = local.projects
  
  source  = "harness-community/content/harness//modules/pipelines"
  version = "~> 0.1"

  name            = each.key
  organization_id = module.organization.details.id
  project_id      = module.projects[each.key].details.id
  yaml_data       = <<-EOT
${each.value.yaml_properties}
${each.value.yaml_stages}
EOT
}

// Project secrets
resource "harness_platform_secret_text" "testrepo1" {
  for_each = local.projects["test-repo1"].secrets

  identifier                = replace(each.key, "-", "_")
  name                      = each.key
  org_id                    = module.organization.details.id
  project_id                = module.projects["test-repo1"].details.id
  secret_manager_identifier = "harnessSecretManager"
  value                     = base64decode(each.value.value)
  value_type                = "Inline"
}

// When creating a new Project, there is a potential race-condition
// as the project comes up.  This resource will introduce
// a slight delay in further execution to wait for the resources to
// complete.
resource "time_sleep" "testrepo1_secret_setup" {
  depends_on = [
    harness_platform_secret_text.testrepo1
  ]

  create_duration  = "15s"
  destroy_duration = "15s"
}
// Pull request trigger
module "trigger_pr" {
  for_each = local.projects
  
  source  = "harness-community/content/harness//modules/triggers"
  version = "~> 0.1"

  name = "Pull Request"
  organization_id = module.organization.details.id
  project_id      = module.projects[each.key].details.id
  pipeline_id     = module.pipelines[each.key].details.id
  trigger_enabled = var.enable_triggers
  yaml_data       = <<-EOT
source:
  type: Webhook
  spec:
    # TODO: support other SCM types
    type: Github
    spec:
      type: PullRequest
      spec:
        connectorRef: 
        autoAbortPreviousExecutions: false
        payloadConditions:
          - key: targetBranch
            operator: Equals
            value: ${each.value.branch}
        headerConditions: []
        repoName: ${each.value.namespace}/${each.value.repo}
        actions:
          - Open
          - Reopen
          - Synchronize
inputYaml: |
  pipeline:
    identifier: ${module.pipelines[each.key].details.id}
    properties:
      ci:
        codebase:
          build:
            type: PR
            spec:
              number: <+trigger.prNumber>
  EOT
}

// Push trigger
module "trigger_push" {
  for_each = local.projects
  
  source  = "harness-community/content/harness//modules/triggers"
  version = "~> 0.1"

  name = "Push"
  organization_id = module.organization.details.id
  project_id      = module.projects[each.key].details.id
  pipeline_id     = module.pipelines[each.key].details.id
  trigger_enabled = var.enable_triggers
  yaml_data       = <<-EOT
source:
  type: Webhook
  spec:
    # TODO: support other SCM types
    type: Github
    spec:
      type: Push
      spec:
        connectorRef: 
        autoAbortPreviousExecutions: false
        payloadConditions:
          - key: targetBranch
            operator: Equals
            value: ${each.value.branch}
        headerConditions: []
        repoName: ${each.value.namespace}/${each.value.repo}
        actions: []
inputYaml: |
  pipeline:
    identifier: ${module.pipelines[each.key].details.id}
    properties:
      ci:
        codebase:
          build:
            type: branch
            spec:
              branch: <+trigger.branch>
  EOT  
}

// Tag trigger
module "trigger_tag" {
  for_each = local.projects
  
  source  = "harness-community/content/harness//modules/triggers"
  version = "~> 0.1"

  name = "Tag"
  organization_id = module.organization.details.id
  project_id      = module.projects[each.key].details.id
  pipeline_id     = module.pipelines[each.key].details.id
  trigger_enabled = var.enable_triggers
  yaml_data       = <<-EOT
source:
  type: Webhook
  spec:
    # TODO: support other SCM types
    type: Github
    spec:
      type: Push
      spec:
        connectorRef: 
        autoAbortPreviousExecutions: false
        payloadConditions:
          - key: <+trigger.payload.ref>
            operator: StartsWith
            value: refs/tags/
        headerConditions: []
        repoName: ${each.value.namespace}/${each.value.repo}
        actions: []
inputYaml: |
  pipeline:
    identifier: ${module.pipelines[each.key].details.id}
    properties:
      ci:
        codebase:
          build:
            type: branch
            spec:
              branch: <+trigger.branch>
  EOT
}